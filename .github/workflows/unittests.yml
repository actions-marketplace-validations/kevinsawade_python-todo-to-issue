# This is a basic workflow to help you get started with Actions

name: Unittests

# Controls when the action will run. 
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  unittests:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9]

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout üõéÔ∏è
        uses: actions/checkout@v2
      
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
          
      - name: Install dependencies üîß
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Create docs/build
        run: mkdir -p docs/build

      - name: Run Unittests üß™ and Coverage üêç
        env:
          INPUT_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          INPUT_REPO: ${{ github.repository }}
          INPUT_BEFORE: ${{ github.event.before }}
          INPUT_SHA: ${{ github.sha }}
          INCLUDE_TODO_AFTER_CODE_LINE: ${{ false }}
          ACTIONS_ALLOW_UNSECURE_COMMANDS: 'true'
        run: |
          coverage run -m unittest discover -s tests
          PERCENT=$( coverage report -m --omit="*/tests*,*__init__*,*Users*" | tail -1 | awk '{print $4}' )
          COV=$( coverage report -m --omit="*/tests*,*__init__*,*Users*" | tail -1 | awk '{print $4}' | sed 's/%//g' )
          echo $COV
          echo "::set-env name=Percent::$PERCENT"
          if [[ "$COV" -le 50 ]] ; then
            COLOR=red
          elif [[ "$COV" -gt 80 ]] ; then
            COLOR=green
          else
            COLOR=orange
          fi
          echo $COLOR
          echo "::set-env name=CoLoR::$COLOR"
          coverage html --omit="*/tests*,*__init__*,*Users*"
          mv htmlcov/ docs/build/

      - name: Create Awesome Badge
        uses: schneegans/dynamic-badges-action@v1.0.0
        with:
          auth: ${{ secrets.GIST_SECRET }}
          gistID: 5989424e030f59c478f353d5b9da91c2
          filename: test.json
          label: Coverage
          namedLogo: Codecov
          message: ${{ env.Percent }}
          color: ${{ env.CoLoR }}

      - name: Run pdoc
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          if [ -f docs/requirements.txt ]; then pip install -r docs/requirements.txt; fi
          pdoc --html --output-dir docs/build main --force
          mv docs/build/main.html docs/build/index.html
          ls docs/build/
          ls docs/build/htmlcov

      - name: Deploy üöÄ
        uses: JamesIves/github-pages-deploy-action@4.1.4
        with:
          branch: gh-pages # The branch the action should deploy to.
          folder: docs/build/ # The folder the action should deploy.


      - name: Tag with latest üè∑Ô∏è
        uses: EndBug/latest-tag@latest
        with:
          # If a description is provided, the action will use it to create an annotated tag. If none is given, the action will create a lightweight tag.
          # Optional
          description: This is the latest version of kevinsawade/python-todo-to-issue
